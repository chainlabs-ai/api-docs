openapi: 3.0.3
info:
  title: Chainlabs API
  description: |-
    The Chainlabs API provides an automated way of retrieving traced seed addresses, corresponding metadata, and screenshot proofs to replace the monthly manual CSV deliveries.
    
    To obtain all the historical as well as newly added entities, traces, and screenshots, use the */entities*, */traces*, */entity_screenshots*, and */trace_screenshots* endpoints. To get modification/deletion events that have taken place on existing data, use the */sync_entities* and */sync_traces* endpoints and modify/delete entities or traces on your local data based on them. 
  version: 1.0.1
paths:
  /entities:
    get:
      tags:
        - Entities
      summary: Get entities filtered by entityIds, categoryIds, entityName, URL, dateTimeAdded
      description: Returns the metadata for the entities that match the criteria provided in the request. The metadata will have fields specific to the category of the entity. All entities are returned if the request is empty.
      operationId: entities
      requestBody:
        $ref: '#/components/requestBodies/GetEntitiesRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/Atm'
                    - $ref: '#/components/schemas/Crim'
                    - $ref: '#/components/schemas/Csam'
                    - $ref: '#/components/schemas/Dnm'
                    - $ref: '#/components/schemas/Fct'
                    - $ref: '#/components/schemas/Gm'
                    - $ref: '#/components/schemas/Psp'
                    - $ref: '#/components/schemas/Vnh'
        '400':
          description: Invalid request
        '404':
          description: Entity not found
        '422':
          description: Validation exception
  /traces:
    get:
      tags:
        - Traces
      summary: Get traces filtered by traceIds, entityIds, categoryIds, tokens, transactionTypes, dateTimeAdded
      description: Returns the traces that match the criteria provided in the request. All traces are returned if the request is empty.
      operationId: traces
      requestBody:
        $ref: '#/components/requestBodies/GetTracesRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trace'
        '400':
          description: Invalid request
        '404':
          description: Trace not found
        '422':
          description: Validation exception
  /entity_screenshots:
    get:
      tags:
        - Screenshots
      summary: Get entity screenshots filtered by entityIds, categoryIds, dateTimeAdded
      description: Returns a .zip containing the screenshot proofs for the entities that match the criteria provided in the request. All screenshots are returned if the request is empty.
      operationId: entityScreenshots
      requestBody:
        $ref: '#/components/requestBodies/GetEntityScreenshotsRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/zip:
              schema:
                type: object
        '400':
          description: Invalid request
        '404':
          description: Entity screenshot not found
        '422':
          description: Validation exception
  /trace_screenshots:
    get:
      tags:
        - Screenshots
      summary: Get trace screenshots filtered by traceIds, entityIds, categoryIds, dateTimeAdded
      description: Returns a .zip containing the screenshot proofs for the traces that match the criteria provided in the request. All screenshots are returned if the request is empty.
      operationId: traceScreenshots
      requestBody:
        $ref: '#/components/requestBodies/GetTraceScreenshotsRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/zip:
              schema:
                type: object
        '400':
          description: Invalid request
        '404':
          description: Trace screenshot not found
        '422':
          description: Validation exception
  /sync_entities:
    get:
      tags:
        - Entities
      summary: Get sync events (modification/deletion) for existing entities
      description: Returns sync events (modification/deletion) for the entities that match the criteria provided in the request. All sync events are returned if the request is empty.
      operationId: syncEntities
      requestBody:
        $ref: '#/components/requestBodies/SyncRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResponse'
        '400':
          description: Invalid request
        '404':
          description: Sync entity event not found
        '422':
          description: Validation exception
  /sync_traces:
    get:
      tags:
        - Traces
      summary: Get sync events (modification/deletion) for existing traces
      description: Returns sync events (modification/deletion) for the traces that match the criteria provided in the request. All sync events are returned if the request is empty.
      operationId: syncTraces
      requestBody:
        $ref: '#/components/requestBodies/SyncRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResponse'
        '400':
          description: Invalid request
        '404':
          description: Sync trace event not found
        '422':
          description: Validation exception
components:
  schemas:
    Entity:
      description: The entity object contains all the metadata for an entity
      type: object
      properties:
        entityId:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Binance
        categoryId:
          type: string
          example: cex
        urls:
          type: array
          items:
            type: string
            example: https://binance.com
        dateTimeAdded:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        dateTimeUpdated:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
    Atm:
      description: The metadata for an ATM entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            atmId:
              type: string
              example: id
            atmStatus:
              type: string
              example: Operating
            countryOfIncorporation:
              type: string
              example: US
            countryOfOperation:
              type: string
              example: US
            kycInputDate:
              type: string
              format: date
              example: 2017-07-21
            kycNotes:
              type: string
              example: note
            kycVerification:
              type: array
              items:
                type: string
                example: Passport
            location:
              type: string
              example: https://maps.app.goo.gl/oe4QrRpohBPHZZVy8
            operatedBy:
              type: string
            osint:
              type: string
            supportedFiat:
              type: array
              items:
                type: string
                example: USD
    Crim:
      description: The metadata for a Criminal Enterprise entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            operationalStatus:
              type: string
              example: Open
            tags:
              type: array
              items:
                type: string
                example: Violent Crimes
            osint:
              type: string
            isScam:
              type: string
              example: Yes
            scamSource:
              type: string
              example: https://source-link.com
            createdDate:
              type: string
              format: date
              example: 2020
    Csam:
      description: The metadata for a CSAM entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            operationalStatus:
              type: string
              example: Open
            tags:
              type: array
              items:
                type: string
                example: Darkweb
            mediaTypes:
              type: array
              items:
                type: string
                example: Videos
            osint:
              type: string
            isScam:
              type: string
              example: Yes
            scamSource:
              type: string
              example: https://source-link.com
            createdDate:
              type: string
              format: date
              example: 2020
    Dnm:
      description: The metadata for a Darknet Market entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            operationalStatus:
              type: string
              example: Open
            tags:
              type: array
              items:
                type: string
                example: Darkweb
            marketRules:
              type: string
              example: rules
            osint:
              type: string
            productsAndServices:
              type: array
              items:
                type: string
                example: Drugs
            isScam:
              type: string
              example: Yes
            scamSource:
              type: string
              example: https://source-link.com
            createdDate:
              type: string
              format: date
              example: 2020
    Fct:
      description: The metadata for a Faucet entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            operationalStatus:
              type: string
              example: Open
            osint:
              type: string
            isScam:
              type: string
              example: Yes
            scamSource:
              type: string
              example: https://source-link.com
            createdDate:
              type: string
              format: date
              example: 2020
    Gm:
      description: The metadata for a Gambling entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            operationalStatus:
              type: string
              example: Open
            tags:
              type: array
              items:
                type: string
                example: Centralized
            countryOfIncorporation:
              type: string
              example: US
            kycInputDate:
              type: string
              format: date
              example: 2017-07-21
            kycVerification:
              type: array
              items:
                type: string
                example: Passport
            osint:
              type: string
            isScam:
              type: string
              example: Yes
            scamSource:
              type: string
              example: https://source-link.com
            createdDate:
              type: string
              format: date
              example: 2020
    Psp:
      description: The metadata for a Payment Service Provider entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            operationalStatus:
              type: string
              example: Open
            countryOfIncorporation:
              type: string
              example: US
            osint:
              type: string
            isScam:
              type: string
              example: Yes
            scamSource:
              type: string
              example: https://source-link.com
            createdDate:
              type: string
              format: date
              example: 2020
    Vnh:
      description: The metadata for a VPN and Hosting entity
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            operationalStatus:
              type: string
              example: Open
            tags:
              type: array
              items:
                type: string
                example: Clearnet
            countryOfIncorporation:
              type: string
              example: US
            osint:
              type: string
            isScam:
              type: string
              example: Yes
            scamSource:
              type: string
              example: https://source-link.com
            createdDate:
              type: string
              format: date
              example: 2020
    Trace:
      description: The trace object contains all the information about a Chainlabs tracing transaction, including the seed address and entity label
      type: object
      properties:
        traceId:
          type: integer
          format: int64
          example: 10
        entityId:
          type: integer
          format: int64
          example: 10
        categoryId:
          type: string
          example: cex
        address:
          type: string
          example: 34xp4vRoCGJym3xR7yCVPFHoCNxv4Twseo
        token:
          type: string
          example: btc
        transactionType:
          type: string
          example: btc
        memo:
          type: integer
          format: int64
          example: 10
        notes:
          type: string
          example: hello
        dateTimeAdded:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
    SyncResponse:
      description: The sync event information for entities/traces that have been modified/deleted
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        eventType:
          type: string
          enum:
            - modify
            - delete
        attributeName:
          type: string
          example: entityName
        attributeValue:
          type: string
          example: hello
        dateTimeUpdated:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
  requestBodies:
    GetEntitiesRequest:
      description: |-
        The request is optional and takes in the following parameters to match the returned entities against:
        1. entityIds- List of entityIds
        2. categoryIds- List of categoryIds
        3. entityNameRegex- Regular expression on the entity name
        4. urlRegex- Regular expression on the url
        5. dateTimeAddedRegex- Regular expression on the timestamp string when the entity was made available
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              entityIds:
                type: array
                items:
                  type: integer
                  format: int64
                  example: 10
              categoryIds:
                type: array
                items:
                  type: string
                  example: cex
              entityNameRegex:
                type: string
                example: hello*
              urlRegex:
                type: string
                example: "*binanc*"
              dateTimeAddedRegex:
                type: string
                example: "0[1-9]-07-2024"
    GetTracesRequest:
      description: |-
        The request is optional and takes in the following parameters to match the returned traces against:
        1. traceIds- List of traceIds
        2. entityIds- List of entityIds
        3. categoryIds- List of categoryIds
        4. tokens- List of digitial tokens/coins (BTC, LTC, XRP, ETH, SOL, ALGO, BNB (BEP20), ADA, DOGE, MATIC, BCH, ZEC, DASH, TRX, EOS, XMR, DOT, FTM, XLM, ATOM)
        5. transactionTypes- List of transaction types (deposit, withdraw, direct, deposit)
        6. dateTimeAddedRegex- Regular expression on the timestamp string when the trace was made available
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              traceIds:
                type: array
                items:
                  type: integer
                  format: int64
                  example: 10
              entityIds:
                type: array
                items:
                  type: integer
                  format: int64
                  example: 10
              categoryIds:
                type: array
                items:
                  type: string
                  example: cex
              tokens:
                type: array
                items:
                  type: string
                  example: btc
              transactionTypes:
                type: array
                items:
                  type: string
                  enum:
                  - deposit
                  - withdraw
                  - direct
                  - external
                  example: deposit
              dateTimeAddedRegex:
                type: string
                example: "0[1-9]-07-2024"
    GetEntityScreenshotsRequest:
      description: |-
        The request is optional and takes in the following parameters to match the returned screenshots against:
        1. entityIds- List of entityIds
        2. categoryIds- List of categoryIds
        3. dateTimeAddedRegex- Regular expression on the timestamp string when the screenshot was made available
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              entityIds:
                type: array
                items:
                  type: integer
                  format: int64
                  example: 10
              categoryIds:
                type: array
                items:
                  type: string
                  example: cex
              dateTimeAddedRegex:
                type: string
                example: "0[1-9]-07-2024"
    GetTraceScreenshotsRequest:
      description: |-
        The request is optional and takes in the following parameters to match the returned screenshots against:
        1. traceIds- List of traceIds
        2. entityIds- List of entityIds
        3. categoryIds- List of categoryIds
        4. dateTimeAddedRegex- Regular expression on the timestamp string when the screenshot was made available
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              traceIds:
                type: array
                items:
                  type: integer
                  format: int64
                  example: 10
              entityIds:
                type: array
                items:
                  type: integer
                  format: int64
                  example: 10
              categoryIds:
                type: array
                items:
                  type: string
                  example: cex
              dateTimeAddedRegex:
                type: string
                example: "0[1-9]-07-2024"
    SyncRequest:
      description: |-
        The request is optional and takes in the following parameters to match the returned sync events against:
        1. ids- List of entityIds or traceIds for sync_entities or sync_traces respectively
        2. dateTimeUpdatedRegex- Regular expression on the timestamp string when the sync event occured
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              ids:
                type: array
                items:
                  type: integer
                  format: int64
                  example: 10
              dateTimeUpdatedRegex:
                type: string
                example: "0[1-9]-07-2024"
